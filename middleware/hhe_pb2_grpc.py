# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import hhe_pb2 as hhe__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hhe_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AnalystServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getPublicKey = channel.unary_unary(
                '/hheproto.AnalystService/getPublicKey',
                request_serializer=hhe__pb2.Empty.SerializeToString,
                response_deserializer=hhe__pb2.PublicKeyMsg.FromString,
                _registered_method=True)
        self.addEncryptedResult = channel.unary_unary(
                '/hheproto.AnalystService/addEncryptedResult',
                request_serializer=hhe__pb2.CiphertextResult.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)


class AnalystServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getPublicKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addEncryptedResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalystServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getPublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.getPublicKey,
                    request_deserializer=hhe__pb2.Empty.FromString,
                    response_serializer=hhe__pb2.PublicKeyMsg.SerializeToString,
            ),
            'addEncryptedResult': grpc.unary_unary_rpc_method_handler(
                    servicer.addEncryptedResult,
                    request_deserializer=hhe__pb2.CiphertextResult.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hheproto.AnalystService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hheproto.AnalystService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AnalystService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getPublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.AnalystService/getPublicKey',
            hhe__pb2.Empty.SerializeToString,
            hhe__pb2.PublicKeyMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addEncryptedResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.AnalystService/addEncryptedResult',
            hhe__pb2.CiphertextResult.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CSPServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addPublicKeys = channel.unary_unary(
                '/hheproto.CSPService/addPublicKeys',
                request_serializer=hhe__pb2.PublicKeySetMsg.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)
        self.addEncryptedKeys = channel.unary_unary(
                '/hheproto.CSPService/addEncryptedKeys',
                request_serializer=hhe__pb2.EncSymmetricKeysMsg.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)
        self.addEncryptedData = channel.unary_unary(
                '/hheproto.CSPService/addEncryptedData',
                request_serializer=hhe__pb2.EncSymmetricDataMsg.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)
        self.addMLModel = channel.unary_unary(
                '/hheproto.CSPService/addMLModel',
                request_serializer=hhe__pb2.MLModelMsg.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)
        self.evaluateModel = channel.unary_unary(
                '/hheproto.CSPService/evaluateModel',
                request_serializer=hhe__pb2.CiphertextBytes.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)
        self.evaluateModelFromFile = channel.unary_unary(
                '/hheproto.CSPService/evaluateModelFromFile',
                request_serializer=hhe__pb2.DataFile.SerializeToString,
                response_deserializer=hhe__pb2.Empty.FromString,
                _registered_method=True)


class CSPServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addPublicKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addEncryptedKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addEncryptedData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addMLModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def evaluateModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def evaluateModelFromFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CSPServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addPublicKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.addPublicKeys,
                    request_deserializer=hhe__pb2.PublicKeySetMsg.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
            'addEncryptedKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.addEncryptedKeys,
                    request_deserializer=hhe__pb2.EncSymmetricKeysMsg.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
            'addEncryptedData': grpc.unary_unary_rpc_method_handler(
                    servicer.addEncryptedData,
                    request_deserializer=hhe__pb2.EncSymmetricDataMsg.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
            'addMLModel': grpc.unary_unary_rpc_method_handler(
                    servicer.addMLModel,
                    request_deserializer=hhe__pb2.MLModelMsg.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
            'evaluateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.evaluateModel,
                    request_deserializer=hhe__pb2.CiphertextBytes.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
            'evaluateModelFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.evaluateModelFromFile,
                    request_deserializer=hhe__pb2.DataFile.FromString,
                    response_serializer=hhe__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hheproto.CSPService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hheproto.CSPService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CSPService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addPublicKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.CSPService/addPublicKeys',
            hhe__pb2.PublicKeySetMsg.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addEncryptedKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.CSPService/addEncryptedKeys',
            hhe__pb2.EncSymmetricKeysMsg.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addEncryptedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.CSPService/addEncryptedData',
            hhe__pb2.EncSymmetricDataMsg.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addMLModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.CSPService/addMLModel',
            hhe__pb2.MLModelMsg.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def evaluateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.CSPService/evaluateModel',
            hhe__pb2.CiphertextBytes.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def evaluateModelFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hheproto.CSPService/evaluateModelFromFile',
            hhe__pb2.DataFile.SerializeToString,
            hhe__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
